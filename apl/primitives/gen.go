// +build ignore

package main

import (
	"bufio"
	"fmt"
	"log"
	"os"
	"os/exec"
	"regexp"
	"strings"
	"time"
)

var prefix = regexp.MustCompile(` *apl_test.go:[0-9]*:`)
var spaces = regexp.MustCompile(`^ *`)

// This program is run by go generate.
// It runs go test -v in short mode, which only includes
// tests with the normal numeric tower.
// The output of go test is filtered and written to Tests.md.
func main() {
	mktest()
	mkref()
}

func mktest() {

	cmd := exec.Command("go", "test", "-v", "-short", "-run", "Normal")
	testout, err := cmd.StdoutPipe()
	if err != nil {
		log.Fatal(err)
	}
	if err := cmd.Start(); err != nil {
		log.Fatal(err)
	}

	w, err := os.Create("../../TESTS.md")
	if err != nil {
		log.Fatal(err)
	}
	defer w.Close()

	scn := bufio.NewScanner(testout)
	for scn.Scan() {
		s := scn.Text()
		if strings.HasPrefix(s, "===") {
			continue
		}
		if strings.HasPrefix(s, "---") {
			continue
		}
		s = prefix.ReplaceAllString(s, "")
		s = spaces.ReplaceAllString(s, "")
		fmt.Fprintln(w, s)
	}

	if err := cmd.Wait(); err != nil {
		log.Fatal(err)
	}
	fmt.Fprintf(w, "```\n")
}

func mkref() {
	cmd := exec.Command("go", "test", "-v", "-short", "-run", "Doc")
	testout, err := cmd.StdoutPipe()
	if err != nil {
		log.Fatal(err)
	}
	if err := cmd.Start(); err != nil {
		log.Fatal(err)
	}

	w, err := os.Create("../../REF.md")
	if err != nil {
		log.Fatal(err)
	}
	defer w.Close()

	fmt.Fprintln(w, `# Reference
- [Primitive Functions](#primitive-functions)
- [Operators](#operators)
`)

	scn := bufio.NewScanner(testout)
	for scn.Scan() {
		s := scn.Text()
		if strings.HasPrefix(s, "===") {
			continue
		}
		if strings.HasPrefix(s, "---") {
			continue
		}
		fmt.Fprintln(w, s)
	}

	if err := cmd.Wait(); err != nil {
		log.Fatal(err)
	}
	fmt.Fprintf(w, "\ngenerated by `go generate (apl/primitives/gen.go)` %s\n", time.Now().Format("2006-01-02 15:04:05"))
}
