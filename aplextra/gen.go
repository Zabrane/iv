// +build ignore

package main

import (
	"fmt"
	"os"
)

func main() {
	f, err := os.Open(".")
	if err != nil {
		panic(err)
	}

	infos, err := f.Readdir(-1)
	if err != nil {
		panic(err)
	}

	var dirs []string
	for _, fi := range infos {
		if fi.IsDir() {
			dirs = append(dirs, fi.Name())
		}
	}

	w, err := os.Create("register.go")
	if err != nil {
		panic(err)
	}
	defer w.Close()

	fmt.Fprintf(w, `package aplextra

// autogenerated by go generate. do not edit.

//go:generate go run gen.go

import (
	"github.com/ktye/iv/apl"
	"github.com/ktye/iv/apl/operators"
	"github.com/ktye/iv/apl/primitives"
`)

	for _, d := range dirs {
		fmt.Fprintf(w, `	"github.com/ktye/iv/aplextra/%s"`+"\n", d)
	}
	fmt.Fprintf(w, `)

// RegisterAll registers all extra packages to apl.
// It also registers the standard packages apl/primitives and apl/operators.
//
// Usage:
//	import "github.com/ktye/iv/apl"
//	a := apl.New(os.Stdout)
//	RegisterAll(a)
func RegisterAll(a *apl.Apl) {
	primitives.Register(a)
	operators.Register(a)
`)
	for _, d := range dirs {
		fmt.Fprintf(w, "\t%s.Register(a)\n", d)
	}
	fmt.Fprintln(w, "}")

}
